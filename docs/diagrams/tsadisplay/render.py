# -*- coding: utf-8 -*-
from tsadisplay import __version__


def tabular_output(table, indent=None, col_delimiter=None):
    indent = indent or ' ' * 4
    col_delimiter = col_delimiter or ' '
    col_width = [max(len(x) for x in col) for col in zip(*table)]
    for line in table:
        yield indent + col_delimiter.join(
            '{:{}}'.format(x, col_width[i]) for i, x in enumerate(line)
        )


def plantuml(desc):
    """Generate plantuml class diagram

    :param desc: result of sadisplay.describe function

    Return plantuml class diagram string
    """

    classes, relations, inherits = desc

    result = [
        '@startuml',
        'skinparam defaultFontName Courier',
    ]

    for cls in classes:
        # issue #11 - tabular output of class members (attrs)
        # http://stackoverflow.com/a/8356620/258194

        # build table
        class_desc = []
        # table columns
        class_desc += [(i[1], i[0]) for i in cls['cols']]
        # class properties
        class_desc += [('+', i) for i in cls['props']]
        # methods
        class_desc += [('%s()' % i, '') for i in cls['methods']]

        result.append(
            'Class %(name)s {\n%(desc)s\n}' % {
                'name': cls['name'],
                'desc': '\n'.join(tabular_output(class_desc)),
            }
        )

    for item in inherits:
        result.append("%(parent)s <|-- %(child)s" % item)

    for item in relations:
        result.append("%(from)s <--o %(to)s: %(by)s" % item)

    result += [
        'right footer generated by sadisplay v%s' % __version__,
        '@enduml',
    ]

    return '\n\n'.join(result)


def dot(desc, color, title="Trump's ORM"):
    """Generate dot file

    :param desc: result of sadisplay.describe function

    Return string
    """

    classes, relations, inherits = desc
	
    CLASS_TEMPLATE = """
        %(name)s [label=<
        <TABLE BGCOLOR="{ncolor}" BORDER="0"
            CELLBORDER="0" CELLSPACING="0">
                <TR><TD COLSPAN="2" CELLPADDING="4"
                        ALIGN="CENTER" BGCOLOR="{ncolor}"
                ><FONT FACE="Helvetica Bold" COLOR="black"
                >%(name)s</FONT></TD></TR>%(cols)s%(props)s%(methods)s
        </TABLE>
    >]
    """.format(**color)

    COLUMN_TEMPLATE = """<TR><TD ALIGN="LEFT" BORDER="0"
        BGCOLOR="{ccolor}"
        ><FONT FACE="Bitstream Vera Sans">%(name)s</FONT
        ></TD><TD BGCOLOR="{ccolor}" ALIGN="RIGHT"
        ><FONT FACE="Bitstream Vera Sans">%(type)s</FONT
        ></TD></TR>""".format(**color)

    PROPERTY_TEMPLATE = """<TR><TD ALIGN="LEFT" BORDER="0"
        BGCOLOR="{pcolor}"
        ><FONT FACE="Bitstream Vera Sans">%(name)s</FONT></TD
        ><TD BGCOLOR="{pcolor}" ALIGN="RIGHT"
        ><FONT FACE="Bitstream Vera Sans">PROP</FONT
        ></TD></TR>""".format(**color)

    METHOD_TEMPLATE = """<TR><TD ALIGN="LEFT" BORDER="0"
        BGCOLOR="{mcolor}"
        ><FONT FACE="Bitstream Vera Sans">%(name)s()</FONT></TD
        ><TD BGCOLOR="{mcolor}" ALIGN="RIGHT"
        ><FONT FACE="Bitstream Vera Sans">METH</FONT
        ></TD></TR>""".format(**color)

    EDGE_INHERIT = "\tedge [\n\t\tarrowhead = empty\n\t]"
    INHERIT_TEMPLATE = "\t%(child)s -> %(parent)s \n"

    EDGE_REL = "\tedge [\n\t\tarrowhead = ediamond\n\t\tarrowtail = open\n\t]"
    RELATION_TEMPLATE = "\t\"%(from)s\" -> \"%(to)s\" [label = \"%(by)s\"]"

    result = ["""
        digraph G {
            label = "%s";
            fontname = "Bitstream Vera Sans"
            fontsize = 12

            node [
                fontname = "Bitstream Vera Sans"
                fontsize = 8
                shape = "plaintext"
            ]

            edge [
                fontname = "Bitstream Vera Sans"
                fontsize = 8
            ]
    """ % title]

    for cls in classes:
        cols = ' '.join([
            COLUMN_TEMPLATE % {'type': c[0], 'name': c[1]} for c in cls['cols']
        ])
        props = ' '.join([
            PROPERTY_TEMPLATE % {'name': p} for p in cls['props']
        ])
        methods = ' '.join([
            METHOD_TEMPLATE % {'name': m} for m in cls['methods']
        ])
        renderd = CLASS_TEMPLATE % {
            'name': cls['name'],
            'cols': cols,
            'props': props,
            'methods': methods,
        }

        result.append(renderd)

    result += [EDGE_INHERIT]
    for item in inherits:
        result.append(INHERIT_TEMPLATE % item)

    result += [EDGE_REL]
    for item in relations:
        result.append(RELATION_TEMPLATE % item)

    result += [
        '}'
    ]

    return '\n'.join(result)
